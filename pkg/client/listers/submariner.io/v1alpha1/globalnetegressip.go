/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/submariner-io/submariner/pkg/apis/submariner.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GlobalnetEgressIPLister helps list GlobalnetEgressIPs.
type GlobalnetEgressIPLister interface {
	// List lists all GlobalnetEgressIPs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalnetEgressIP, err error)
	// GlobalnetEgressIPs returns an object that can list and get GlobalnetEgressIPs.
	GlobalnetEgressIPs(namespace string) GlobalnetEgressIPNamespaceLister
	GlobalnetEgressIPListerExpansion
}

// globalnetEgressIPLister implements the GlobalnetEgressIPLister interface.
type globalnetEgressIPLister struct {
	indexer cache.Indexer
}

// NewGlobalnetEgressIPLister returns a new GlobalnetEgressIPLister.
func NewGlobalnetEgressIPLister(indexer cache.Indexer) GlobalnetEgressIPLister {
	return &globalnetEgressIPLister{indexer: indexer}
}

// List lists all GlobalnetEgressIPs in the indexer.
func (s *globalnetEgressIPLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalnetEgressIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalnetEgressIP))
	})
	return ret, err
}

// GlobalnetEgressIPs returns an object that can list and get GlobalnetEgressIPs.
func (s *globalnetEgressIPLister) GlobalnetEgressIPs(namespace string) GlobalnetEgressIPNamespaceLister {
	return globalnetEgressIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GlobalnetEgressIPNamespaceLister helps list and get GlobalnetEgressIPs.
type GlobalnetEgressIPNamespaceLister interface {
	// List lists all GlobalnetEgressIPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GlobalnetEgressIP, err error)
	// Get retrieves the GlobalnetEgressIP from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GlobalnetEgressIP, error)
	GlobalnetEgressIPNamespaceListerExpansion
}

// globalnetEgressIPNamespaceLister implements the GlobalnetEgressIPNamespaceLister
// interface.
type globalnetEgressIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GlobalnetEgressIPs in the indexer for a given namespace.
func (s globalnetEgressIPNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GlobalnetEgressIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GlobalnetEgressIP))
	})
	return ret, err
}

// Get retrieves the GlobalnetEgressIP from the indexer for a given namespace and name.
func (s globalnetEgressIPNamespaceLister) Get(name string) (*v1alpha1.GlobalnetEgressIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("globalnetegressip"), name)
	}
	return obj.(*v1alpha1.GlobalnetEgressIP), nil
}
